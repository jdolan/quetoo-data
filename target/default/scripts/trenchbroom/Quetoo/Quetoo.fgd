// Quetoo Forge Game Data File (.fgd)

@BaseClass = Targetname [ 
	targetname(target_source) : "The target name of this entity if it is to be triggered" 
]

@BaseClass = Target [ 
	target(target_destination) : "The entity to target" 
]

@BaseClass size(-16 -16 -24, 16 16 32) color(0 255 0) = Triggers []

@BaseClass size(-12 -12 -12, 12 12 12) = Item 
[
	spawnflags(Flags) =
	[
		1 : "triggered" : 0
		2 : "no_touch" : 0
		4 : "hover" : 0
	]
	team(string) : "The team name for alternating item spawns"
]
@PointClass base(Item) color(80 100 255) studio("") = item_adrenaline : "Adrenaline" []
@PointClass base(Item) color(255 0 0) size(-16 -16 -16, 16 16 16) studio("") = item_armor_body : "Body armor (+200)" []
@PointClass base(Item) color(255 255 0) size(-16 -16 -16, 16 16 16) studio("") = item_armor_combat : "Combat armor (+100)" []
@PointClass base(Item) color(0 255 0) size(-16 -16 -16, 16 16 16) studio("") = item_armor_jacket : "Jacket armor (+50)" []
@PointClass base(Item) color(0 255 0) size(-4 -4 -6, 4 4 6) studio("") = item_armor_shard : "Shard armor (+3)" []
@PointClass base(Item) color(220 180 0) size(-8 -8 -8, 8 8 8) studio("") = item_health : "Health (+15)" []
@PointClass base(Item) color(40 255 40) size(-4 -4 -6, 4 4 6) studio("") = item_health_small : "Small health (+3)" []
@PointClass base(Item) color(240 60 40) studio("") = item_health_large : "Large health (+25)" []
@PointClass base(Item) color(30 100 200) studio("") = item_health_mega : "Megahealth (+75)" []
@PointClass base(Item) color(20 180 180) studio("") = item_quad : "Quad damage" []
@PointClass base(Item) color(255 0 0) size(-8 -8 -24, 8 8 32) studio("") = item_flag_team1 : "Red flag" []
@PointClass base(Item) color(0 0 255) size(-8 -8 -24, 8 8 32) studio("") = item_flag_team2 : "Blue flag" []
@PointClass base(Item) color(255 255 0) size(-8 -8 -24, 8 8 32) studio("") = item_flag_team3 : "Yellow flag" []
@PointClass base(Item) color(0 0 255) size(-8 -8 -24, 8 8 32) studio("") = item_flag_team4 : "Green flag" []

@BaseClass base(Item) size(-16 -6 -6, 16 6 6) = Weapon []
@PointClass base(Weapon) color(225 200 40) studio("") = weapon_blaster : "Blaster" []
@PointClass base(Weapon) color(220 160 0) studio("") = weapon_shotgun : "Shotgun" []
@PointClass base(Weapon) color(220 160 0) studio("") = weapon_supershotgun : "Super shotgun" []
@PointClass base(Weapon) color(255 255 0) studio("") = weapon_machinegun : "Machinegun" []
@PointClass base(Weapon) color(0 160 0) studio("") = weapon_grenadelauncher : "Grenade launcher" []
@PointClass base(Weapon) color(200 0 0) studio("") = weapon_rocketlauncher : "Rocket launcher" []
@PointClass base(Weapon) color(100 200 255) studio("") = weapon_hyperblaster : "Hyperblaster" []
@PointClass base(Weapon) color(225 225 225) studio("") = weapon_lightning : "Lightning" []
@PointClass base(Weapon) color(0 0 200) studio("") = weapon_railgun : "Rail gun" []
@PointClass base(Weapon) color(80 255 40) studio("") = weapon_bfg : "BFG10K" []

@BaseClass base(Item) size(-10 -8 -8, 10 8 8) = Ammo []
@PointClass base(Ammo) color(220 160 0) studio("") = ammo_shells : "Shells for the Shotgun and Super Shotgun" []
@PointClass base(Ammo) color(255 255 0) studio("") = ammo_bullets : "Bullets for the machinegun" []
@PointClass base(Ammo) color(0 160 0) studio("") = ammo_grenades : "Grenades for the Grenade Launcher" []
@PointClass base(Ammo) color(200 0 0) studio("") = ammo_rockets : "Rockets for the Rocket Launcher" []
@PointClass base(Ammo) color(100 200 255) studio("") = ammo_cells : "Cells for the Hyperblaster" []
@PointClass base(Ammo) color(225 225 225) studio("") = ammo_bolts : "Bolts for the Lightning" []
@PointClass base(Ammo) color(0 0 200) studio("") = ammo_slugs : "Slugs for the Railgun" []
@PointClass base(Ammo) color(80 255 40) studio("") = ammo_nukes : "Nukes for the BFG10K" []

@SolidClass base(Target, Targetname) color(0 255 255) = func_button : "When a button is touched by a player, it moves in the direction set by the 'angle' key, triggers all its targets, stays pressed by the amount of time set by the 'wait' key, then returns to its original position where it can be operated again."
[
	angle(angle) : "Determines the direction in which the button will move (up = -1, down = -2)"
	target(target_destination) : "All entities with a matching target name will be triggered"
	speed(integer) : "Speed"
	wait(integer) : "Wait"
	lip(integer) : "Lip"
	sounds(integer) : "Sound (0, 1 stone, -1 silent)"
	health(integer) : "Health (Door takes DMG to open)"
]

@SolidClass base(Targetname) color(0 255 255) = func_conveyor : "Conveyors are stationary brushes that move what's on them. The brush should be have a surface with at least one current content enabled."
[
	spawnflags(Flags) =
	[
		1 : "start_open" : 0
		2 : "toggle" : 0
	]
	speed(integer) : "The speed at which objects on the conveyor are moved" : 100
]

@SolidClass base(Targetname) color(0 255 255) = func_door : "A sliding door. By default, doors open when a player walks close to them."
[
	spawnflags(Flags) =
	[
		1 : "start_open" : 0
		2 : "toggle" : 0
	]
	message(string) : "An optional string printed when the door is first touched"
	angle(angle) : "Determines the opening direction of the door (up = -1, down = -2)"
	health(integer) : "If set, door must take damage to open"
	speed(integer) : "The speed with which the door opens" : 100
	wait(integer) : "Wait before returning (3 default, -1 = never return)"
	lip(integer) : "The lip remaining at end of move" : 8
	dmg(integer) : "The damage inflicted on players who block the door as it closes" : 2
	sounds(integer) : "The sound set for the door (0 default, 1 stone, -1 silent)" : 0
]

@SolidClass base(Targetname) color(0 255 255) = func_door_rotating : "A door which rotates about an origin on its Z axis. By default, doors open when a player walks close to them."
[
	spawnflags(Flags) =
	[
		1 : "start_open" : 0
		2 : "toggle" : 0
		4 : "reverse" : 0
		8 : "x_axis" : 0
		16 : "y_axis" : 0
	]
	message(string) : "An optional string printed when the door is first touched"
	health(integer) : "If set, door must take damage to open"
	speed(integer) : "The speed with which the door opens" : 100
	rotation(integer) : "The rotation the door will open, in degrees": 90
	wait(integer) : "Wait before returning (3 default, -1 = never return)"
	dmg(integer) : "The damage inflicted on players who block the door as it closes" : 2
	sounds(integer) : "The sound set for the door (0 default, 1 stone, -1 silent)" : 0
]

@SolidClass base(Targetname) color(0 255 255) = func_door_secret : "A secret door which opens when shot, or when targeted. The door first slides back, and then to the side."
[
	spawnflags(Flags) =
	[
		1 : "always_shoot" : 0
		2 : "first_left" : 0
		4 : "first_down" : 0
	]
	angle(angle) : "The angle at which the door opens"
	message(string) : "An optional string printed when the door is first touched"
	health(integer) : "If set, door must take damage to open"
	speed(integer) : "The speed with which the door opens" : 100
	wait(integer) : "Wait before returning (3 default, -1 = never return)"
	dmg(integer) : "The damage inflicted on players who block the door as it closes" : 2
]

@SolidClass color(0 255 180) = func_group : "Groups brushes together in Radiant for convenience. When the map is compiled, these entities are merged back into worldspawn." []

@SolidClass base(Target, Targetname) color(0 255 255) = func_plat : "func_plat"
[
	spawnflags(Flags) =
	[
		1 : "low_trigger" : 0
	]
	speed(integer) : "Speed"
	accel(integer) : "Acceleration"
	lip(integer) : "Lip"
	height(integer) : "Height"
	sounds(integer) : "Sound (0, 1 stone, -1 silent)"
]

@SolidClass base(Target) color(0 255 255) = func_rotating : "func_rotating"
[
	spawnflags(Flags) =
	[
		1 : "start_on" : 0
		2 : "reverse" : 0
		4 : "x_axis" : 0
		8 : "y_axis" : 0
		16 : "touch_pain" : 0
		32 : "stop" : 0
	]
	speed(integer) : "Speed"
	dmg(integer) : "Damage"
	targetname(string) : "The target name of this entity."
]

@PointClass base(Target, Targetname) color(0 255 255) size(-16 -16 -16, 16 16 16) = func_timer : "func_timer"
[
	spawnflags(Flags) =
	[
		1 : "start_on" : 0
	]
	wait(integer) : "Wait"
	random(integer) : "Random"
	delay(integer) : "delay"
	targetname(string) : "The target name of this entity."
]

@SolidClass base(Target, Targetname) color(0 255 255) = func_train : "func_train"
[
	spawnflags(Flags) =
	[
		1 : "start_on" : 0
		2 : "toggle" : 0
		4 : "block_stops" : 0
	]
	dmg(integer) : "Damage"
	speed(integer) : "Speed"
	noise(string) : "Noise File"
]

@SolidClass base(Target, Targetname) color(0 255 255) = func_wall : "func_wall"
[
	spawnflags(Flags) =
	[
		1 : "triggered" : 0
		2 : "toggle" : 0
		4 : "start_on" : 0
	]
]

@SolidClass base(Target, Targetname) color(0 255 255) = func_water : "func_water"
[
	spawnflags(Flags) =
	[
		1 : "start_open" : 0
	]
	angle(angle) : "Angle"
	speed(integer) : "Speed"
	wait(integer) : "Wait"
	lip(integer) : "Lip"
]

@PointClass base(Targetname) color(0 180 0) size(-4 -4 -4, 4 4 4) = info_null : "A positional target for spotlights, etc. These are inhibited in the game and are only useful to the editor and BSP compiler." []
@PointClass base(Targetname) color(0 180 180) size(-4 -4 -4, 4 4 4) = info_notnull : "A positional target for other entities. Unlike info_null, these are available in the game and can be targeted by other entities (e.g. info_player_intermission)."[]

@BaseClass size(-16 -16 -24, 16 16 32) = Spawn [
	angle(angle) : "The angle at which the player will face when spawned"
]
@PointClass base(Spawn) color(255 255 255) = info_player_start : "Single player spawn point." []
@PointClass base(Spawn) color(255 0 255) = info_player_deathmatch : "Deathmatch spawn point." []
@PointClass base(Spawn) color(255 0 0) = info_player_team1 : "Player spawn point for red team in teams or CTF gameplay." []
@PointClass base(Spawn) color(0 0 255) = info_player_team2 : "Player spawn point for blue team in teams or CTF gameplay." []
@PointClass base(Spawn) color(255 255 0) = info_player_team3 : "Player spawn point for yellow team in teams or CTF gameplay." []
@PointClass base(Spawn) color(0 255 0) = info_player_team4 : "Player spawn point for green team in teams or CTF gameplay." []
@PointClass base(Spawn, Target) color(0 255 255) = info_player_intermission : "Camera for intermission screen between matches."
[
	angles(angle) : "The pitch yaw roll angles for the camera (e.g. 20 270 0)."
]

@PointClass base(Target) color(255 255 255) size(-6 -6 -6, 6 6 6) sphere(light) = light : "Point light source."
[
	light(integer) : "Light radius" : 300
	_color(color1) : "Light color as 3 decimal values from 0.0 - 1.0" : "1 1 1"
	_size(integer) : "Light size, to simulate area lights and cast penumbrae" : 16
]

@PointClass base(Target) color(200 255 255) size(-6 -6 -6, 6 6 6) sphere(light) = light_spot : "Point light source with attenuation cone."
[
	light(integer) : "Light radius" : 300
	_color(color1) : "Light color as 3 decimal values from 0.0 - 1.0" : "1 1 1"
	_cone(integer) : "Spotlight attenuation cone width, in degrees" : 22
	_angle(angle) : "Spotlight direction (up = -1, down = -2, yaw = positive value)"
	_size(integer) : "Spotlight size, to simulate area lights and cast penumbrae" : 16
]

@PointClass base(Target) color(255 255 0) size(-16 -16 -16, 16 16 16) = light_sun : "Directional sun light source."
[
	light(integer) : "Sun light as an integer value from 0 - 255" : 255
	_color(color1) : "Sun color as 3 decimal values from 0.0 - 1.0" : "1 1 1"
	_size(integer) : "Sun size, to simulate area lights and cast penumbrae" : 256
]

@SolidClass color(180 180 150) = misc_dust : "Dust volumes emit configurable sprites, like localized weather. These are useful for creating dust, bubbles, foam, mist, etc. These should be of contents mist."
[
	acceleration(string) : "The sprite acceleration" : "0 0 0"
	_color(string) : "The sprite HSVA color as 4 decimal values" : "0 0 1 1"
	dir(vector) : "The sprite directional axis (0 0 0 is billboard)" : "0 0 0"
	density(float) : "The sprite density" : "1"
	_end_color(string) : "The sprite HSVA end color as 4 decimal values" : "0 0 0 0"
	height(float) : "The sprite height. Setting this will cause size to be ignored" : "0"
	lifetime(float) : "The sprite lifetime in seconds" : "10"
	lighting(float) : "The sprite lighting scalar" : "1"
	rotation(float) : "The sprite rotation in degrees" : "0"
	rotation_velocity(float) : "The sprite rotation velocity in degrees per second" : "0"
	_size(float) : "The sprite size" : "1"
	size_velocity(float) : "The sprite size velocity" : "0"
	size_acceleration(float) : "The sprite size acceleration" : "0"
	softness(float) : "The sprite softness scalar" : "1"
	sprite(string) : "The sprite image name" : "particle1"
	velocity(vector) : "The sprite velocity" : "0 0 0"
	width(float): "The sprite width. Setting this will cause size to be ignored" : "0"
]

@PointClass color(255 80 20) size(-6 -6 -6, 6 6 6) = misc_fireball : "Spawns an intermittent fireball that damages players. These are typically used above lava traps for ambiance."
[
	angles(string) : "The angles at which the fireball will fly"
	dmg(integer) : "The damage inflicted to entities that touch the fireball" : 4
	random(float) : "Random time variance in seconds added to wait delay"
	speed(float) : "The speed at which the fireball will fly" : "600"
	wait(float) : "The interval in seconds between fireball emissions" : "5"
]

@PointClass color(255 120 20) size(-16 -16 -16, 16 16 16) = misc_flame : "Client-side flame emitter, useful for torches and ambience."
[
	density(float) : "The flame density" : "1"
 	drift(float) : "The factor of randomized drift applied to the emission rate"
	hz(float) : "The emission rate, in events-per-second" : "10"
	radius(float) : "The flame radius" : "16"
]

@SolidClass color(230 230 230) = misc_fog : "Fog volumes. When compiled, fog brushes are merged into the world. These should be of contents mist. Fog volumes are processed during the lighting compile phase."
[
	_color(string) : "The sprite HSVA color as 4 decimal values" : "0 0 1 1"
	absorption(float) : "The fog absorption, or how much light color it absorbs" : ".125"
	density(float) : "The fog density, or thickness" : "1"
	noise(float) : "The fog noise, or variation in density" : "0"
	frequency(float) : "The simplex noise frequency - effectively the scale of the noise texture" : "32"
	amplitude(float) : "The simplex noise amplitude - effectively the upper limit of noise values" : "1"
	lacunarity(float) : "The simplex noise lacunarity - multiplier per-octave of frequency" : "2"
	persistence(float) : "The simplex noise persistence - multiplier per-octave of amplitude" : "0.5"
	octaves(float) : "The number of octaves to sample" : "5"
	seed(float) : "The simplex noise permutation vector seed" : "0"
	offset(vector) : "An offset added to the noise calculation" : "0 0 0"
]

@PointClass color(80 180 80) size(-16 -16 -16, 16 16 16) = misc_model : "Client-side emission of static models (non-interactive map objects). These are useful for placing trees, torches, and other non-brush scenery."
[
	angles(angle) : "The angles of orientation for the model"
	scale(float) : "The scale for a static model"
	model(studio) : "The static model name, e.g. trees/mytree"
]

@PointClass color(40 120 40) size(-8 -8 -8, 8 8 8) = misc_sound : "Client-side emission of ambient sounds."
[
	atten(choices) : "The attenuation" : 2 =
	[
		0 : "None"
		1 : "Linear"
		2 : "Exponential"
		3 : "Cubic"
	]
	drift(float) : "The factor of randomized drift applied to the emission rate"
	hz(float) : "The emission rate, in events-per-second" : "0"
	sound(sound) : "The sound name, e.g. edge/wind"
]

@PointClass base(Target) color(220 200 20) size(-4 -4 -4, 4 4 4) = misc_sparks : "Client-side emission of spark effects."
[
	_angle(angle) : "Sparks direction (up = -1, down = -2, yaw = positive value)"
	drift(float) : "The factor of randomized drift applied to the emission rate"
	hz(float) : "The emission rate, in events-per-second" : "0"
	target(target_source) : "The name of the entity to target to resolve the sparks direction."
]

@PointClass color(120 120 200) size(-24 -24 -24, 24 24 24) = misc_sprite : "Highly configurable client-side emission of sprites. These are useful for light volumes, blood dripping from walls, or anything else you can think of. If two instances of this entity are teamed, the game will emit randomized instances that mix the properties of both teammates."
[
	acceleration(string) : "The sprite acceleration" : "0 0 0"
	_color(string) : "The sprite HSVA color as 4 decimal values" : "0 0 1 1"
	count(integer) : "The count of sprites to emit per emission" : 1
	dir(vector) : "The sprite directional axis (0 0 0 is billboard)" : "0 0 0"
	density(float) : "The sprite density" : "1"
	drift(float) : "The factor of randomized drift applied to the emission rate"
	_end_color(string) : "The sprite HSVA end color as 4 decimal values" : "0 0 0 0"
	height(float) : "The sprite height. Setting this will cause size to be ignored" : "0"
	lifetime(float) : "The sprite lifetime in seconds" : "10"
	lighting(float) : "The sprite lighting scalar" : "1"
	rotation(float) : "The sprite rotation in degrees" : "0"
	rotation_velocity(float) : "The sprite rotation velocity in degrees per second" : "0"
	_size(float) : "The sprite size" : "1"
	size_velocity(float) : "The sprite size velocity" : "0"
	size_acceleration(float) : "The sprite size acceleration" : "0"
	softness(float) : "The sprite softness scalar" : "1"
	sprite(string) : "The sprite image name" : "particle1"
	team(string) : "The team name, for emitting randomized sprites that mix properties"
	velocity(vector) : "The sprite velocity" : "0 0 0"
	width(float): "The sprite width. Setting this will cause size to be ignored" : "0"
]

@PointClass base(Target) color(220 220 220) size(-10 -10 -10, 10 10 10) = misc_steam : "Client-side emission of steam effects."
[
	count(integer) : "The count of sprites to emit per emission" : 1
	density(float) : "The flame density" : "1"
 	drift(float) : "The factor of randomized drift applied to the emission rate"
	hz(float) : "The emission rate, in events-per-second" : "10"
	radius(float) : "The flame radius" : "16"
	size(float) : "The initial sprite size" : "32"
	target(target_source) : "The name of the entity to target to resolve the steam direction and velocity"
	velocity(vector) : "The steam velocity (if not specified via target)" : "0 0 32"
]

@PointClass base(Target) color(0 255 0) size(-32 -32 -24, 32 32 -16) = misc_teleporter : "Warps players who touch this entity to the targeted misc_teleporter_dest entity."
[
	spawnflags(Flags) =
	[
		1 : "no_effects" : 0
	]
]

@PointClass base(Targetname) color(255 0 0) size(-32 -32 -24, 32 32 -16) = misc_teleporter_dest : "Teleport destination for misc_teleporters."
[
	angle(angle) : "Direction in which player will look when teleported"
]

//Path Corner
@PointClass base(Target, Targetname) color(128 76 0) size(-8 -8 -8, 8 8 8) = path_corner : "path_corner"
[
	spawnflags(Flags) =
	[
		1 : "teleport" : 0
	]
	target(string) : "Next path target"
	pathtarget(string) : "Event to trigger"
]

//Target entities
@PointClass base(Targetname) color(128 128 128) size(-8 -8 -8, 8 8 8) = target_light : "target_light"
[
	spawnflags(Flags) =
	[
		1 : "start_on" : 0
		2 : "toggle" : 0
	]
	colors(string) : "Color - R G B"
	delay(integer) : "Delay"
	dmg(integer) : "Radius"
	wait(integer) : "Wait"
]

@PointClass base(Targetname) color(40 120 40) size(-8 -8 -8, 8 8 8) = target_speaker : "Plays a sound each time it is used, or in loop if requested."
[
	spawnflags(Flags) =
	[
		1 : "loop_on" : 0
		2 : "loop_off" : 0
	]
	atten(choices) : "The attenuation" : 1 =
	[
		0 : "None"
		1 : "Linear"
		2 : "Exponential"
		3 : "Cubic"
	]
	sound(sound) : "The sound name, e.g. voices/haunting"
]

@PointClass base(Targetname) color(128 128 128) size(-8 -8 -8, 8 8 8) = target_string : "target_string"
[
	message(string) : "Message"
]

@PointClass base(Targetname) color(128 128 128) = trigger_relay : "Relay trigger"
[
	delay(integer) : "Delay in Seconds" : 0
	message(string) : "String to Display"
	target(string) : "Triggering Entity or Team"
	killtarget(string) : "Entity or Team to Kill"
]

@PointClass base(Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = trigger_always : "Always triggers" 
[
	killtarget(string) : "Kill Target"
	delay(integer) : "Time before triggering"
]

//trigger_exec needs to be revised. 1/31/2017
@PointClass base(Target, Triggers) color(128 128 128) = trigger_exec : "Executes a console command or script file when activated." 
[
	commands(string) : "The console command(s) to execute."
	script(string) : "The script file (.cfg) to execute."
	delay(integer) : "The delay in seconds between activation and execution of the commands."
]

@SolidClass base(Targetname) color(128 128 128) = trigger_hurt : "Hurts on touch"
[
	spawnflags(Flags) =
	[
		1 : "start_off" : 0
		2 : "toggle" : 0
		4 : "no_protection" : 0
		8 : "slow" : 0
	]
	dmg(integer) : "Damage" : 5
	targetname(string) : "The target name of this entity."
	
]

@SolidClass base(trigger_relay) = trigger_once : "Single fire trigger"
[
	spawnflags(Flags) =
	[
		4 : "triggered" : 0
	]
	delay(integer) : "Delay in Seconds" : 0
	message(string) : "String to Display"
	target(string) : "Triggering Entity or Team"
	killtarget(string) : "Entity or Team to Kill"
	targetname(string) : "The target name of this entity."
]

@SolidClass color(128 128 128) = trigger_push : "Pushes the player in any direction. These are commonly used to make jump pads to send the player upwards. Using the angles key, you can project the player in any direction using 'pitch yaw roll.'"
[
	spawnflags(Flags) =
	[
		1 : "push_once" : 0
		2 : "push_effects" : 0
	]
	angles(angle) : "The direction to push the player in 'pitch yaw roll' notation (e.g. -80 270 0)." : 0
	speed(integer) : "The speed with which to push the player" : 100
]

@SolidClass base(Target) color(0 255 00) = trigger_teleporter : "misc_teleporter_dest"
[
	target(string) : "misc_teleporter_dest"
]

@SolidClass base(trigger_once) = trigger_multiple : "Multiple fire trigger"
[
	spawnflags(Flags) =
	[
		1 : "triggered" : 0
		2 : "shootable" : 0
	]
	delay(integer) : "Delay in Seconds" : 0
	wait(float) : "Interval in Seconds"
	message(string) : "String to Display"
	target(string) : "Triggering Entity or Team"
	killtarget(string) : "Entity or Team to Kill"
	targetname(string) : "The target name of this entity."
]

// World Spawn
@SolidClass = worldspawn : "The worldspawn entity defines global conditions and behavior for the entire level. All brushes not belonging to an explicit entity implicitly belong to worldspawn."
[
	message(string) : "The map title"
	sky(string) : "The sky environment map" : "unit1_"
	ambient(color1) : "The ambient light level" : "0 0 0"
	brightness(float) : "Global light scale, a single positive scalar value" : "1"
	saturation(float) : "Global light saturation, a single positive scalar value" : "1"
	contrast(float) : "Global light contrast, a single positive scalar value" : "1"
	radiosity(float) : "Global indirect light scale, a single positive scalar value" : "1"
	patch_size(float) : "Surface light patch size" : "64"
	weather(choices) : "Weather effects" : "none" =
	[
		"none" : "None"
		"rain" : "Rain"
		"snow" : "Snow"
	]
	fog_absorption(float) : "Global fog light absorption, or how much light color it absorbs" : ".125"
	fog_color(color1) : "Global fog color, as 3 decimal values from 0.0 - 1.0" : "0 0 0"
	fog_density(float) : "Global fog density, a single positive scalar value" : "0"
	fog_noise(float) : "Global fog noise, a single positive scalar value" : "0"
	fog_frequency(float) : "The global fog simplex noise frequency - effectively the scale of the noise texture" : "32"
	fog_amplitude(float) : "The global fog simplex noise amplitude - effectively the upper limit of noise values" : "1"
	fog_lacunarity(float) : "The global fog simplex noise lacunarity - multiplier per-octave of frequency" : "2"
	fog_persistence(float) : "The global fog simplex noise persistence - multiplier per-octave of amplitude" : ".5"
	fog_octaves(float) : "The number of octaves to sample for global fog" : "5"
	fog_seed(float) : "The global fog simplex noise permutation vector seed" : "0"
	fog_offset(vector) : "An offset added to the global fog noise calculation" : "0 0 0"
	gravity(integer) : "Gravity" : 800
	gameplay(choices) : "Weather effects" : "deathmatch" =
	[
		"deathmatch" : "Deathmatch"
		"instagib" : "Instagib"
		"arena" : "Rocket Arena"
	]
	hook(choices) : "Enables the grappling hook" : 0 =
	[
		0 : "Disabled"
		1 : "Enabled"
	]
	teams(choices) : "Enables teams play" : 0 =
	[
		0 : "Disabled"
		1 : "Enabled"
		2 : "Auto-balanced"
	]
	num_teams(choices) : "Specifies the number of teams for teams and CTF play" : 0 =
	[
		0 : "Disabled"
		2 : "2"
		3 : "3"
		4 : "4"
	]
	ctf(choices) : "Enables CTF play" : 0 = [
		0 : "Disabled"
		1 : "Enabled"
		2 : "Auto-balanced"
	]
	match(choices) : "Enables match play (round-based elimination with warmup)" : 0 =
	[
		0 : "Disabled"
		1 : "Enabled"
	]
	fraglimit(integer) : "The frag limit" : 20
	roundlimit(integer) : "The round limit" : 20
	capturelimit(integer) : "The capture limit" : 8
	timelimit(integer) : "The time limit in minutes" : 20
	give(string) : "A comma-delimited item string to give each player on spawn"
]