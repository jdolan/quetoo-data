// Quetoo Forge Game Data File (.fgd)

@BaseClass = Targetname [ 
	targetname(target_source) : "The target name of this entity if it is to be triggered." 
]

@BaseClass = Target [ 
	target(target_destination) : "The entity to target." 
]

@BaseClass size(-16 -16 -24, 16 16 32) color(0 255 0) = Triggers [

]

@BaseClass color(76 76 255) size(-16 -16 -16, 16 16 16) = Item
[
	spawnflags(Flags) =
	[
		1 : "triggered" : 0
		2 : "no_touch" : 0
		4 : "hover" : 0
	]
	team(string) : "Team"
]

@PointClass base(Item) studio("") = item_adrenaline : "adrenaline" 
[

]

@PointClass base(Item) color(255 0 0) studio("") = item_armor_body : "Body armor (+200)."
[

]

@PointClass base(Item) color(255 255 0) studio("") = item_armor_combat : "Combat armor (+100)."
[
	
]

@PointClass base(Item) color(0 255 0) studio("") = item_armor_jacket : "Jacket armor (+50)." 
[
	
]

@PointClass base(Item) color(0 255 0) size(-4 -4 -6, 4 4 6) studio("") = item_armor_shard : "Shard armor (+3)."
[
	
]

@PointClass base(Item) color(200 200 0) size(-8 -8 -8, 8 8 8) studio("") = item_health : "Health (+15)."
[
	
]

@PointClass base(Item) color(40 255 40) size(-4 -4 6, 4 4 6) studio("") = item_health_small : "Small health (+3)."
[
	
]

@PointClass base(Item) color(255 100 100) studio("") = item_health_large : "Large health (+25)."
[
	
]

@PointClass base(Item) color(30 200 255) studio("") = item_health_mega : "Megahealth (+75)."
[
	
]

@PointClass base(Item) color(20 180 180) studio("") = item_quad : "Quad damage."
[
	
]

@PointClass base(Item) color(255 0 0) size(-8 -8 -24, 8 8 32) studio("") = item_flag_team1 : "Red flag."
[
	
]

@PointClass base(Item) color(0 0 255) size(-8 -8 -24, 8 8 32) studio("") = item_flag_team2 : "Blue flag."
[
	
]

@PointClass base(Item) color(255 255 0) size(-8 -8 -24, 8 8 32) studio("") = item_flag_team3 : "Yellow flag."
[
	
]

@PointClass base(Item) color(0 0 255) size(-8 -8 -24, 8 8 32) studio("") = item_flag_team4 : "Green flag."
[
	
]

@BaseClass base(Item) color(76 76 255) size(-16 -6 -6, 16 6 6) = Weapon
[
	team(string) : "The team name for alternating item spawns."
]

@PointClass base(Weapon) studio("") = weapon_shotgun : "Shotgun"
[
	
]

@PointClass base(Weapon) studio("") = weapon_supershotgun : "Super shotgun"
[
	
]

@PointClass base(Weapon) studio("") = weapon_machinegun : "Machinegun"
[
	
]

@PointClass base(Weapon) studio("")= weapon_chaingun : "Chain gun"
[
	
]

@PointClass base(Weapon) studio("") = weapon_grenadelauncher : "Grenade launcher"
[
	
]

@PointClass base(Weapon) studio("") = weapon_rocketlauncher : "Rocket launcher"
[
	
]

@PointClass base(Weapon) color(100 200 255) studio("") = weapon_hyperblaster : "Hyperblaster"
[
	
]

@PointClass base(Weapon) studio("") = weapon_railgun : "Rail gun"
[
	
]

@PointClass base(Weapon) studio("") = weapon_bfg : "Big Freakin Gun!"
[
	
]

@PointClass base(Weapon) studio("") = weapon_blaster : "Blaster"
[
	
]

@PointClass base(Weapon) studio("") = weapon_lightning : "Lightning"
[
	
]

@BaseClass base(Item) color(76 76 255) size(-8 -8 -8, 8 8 8) = Ammo 
[
	team(string) : "Team"
]

@PointClass base(Ammo) color(200 200 0) studio("") = ammo_shells : "Shells for the Shotgun and Super Shotgun."
[
	
]

@PointClass base(Ammo) color(255 255 0) studio("") = ammo_bullets : "Bullets for the machinegun."
[
	
]

@PointClass base(Ammo) color(100 200 255) studio("") = ammo_cells : "Cells for the Hyperblaster."
[
	
]

@PointClass base(Ammo) color(0 255 0) studio("") = ammo_grenades : "Grenades for the Grenade Launcher."
[
	
]

@PointClass base(Ammo) color(200 0 0) studio("") = ammo_rockets : "Rockets for the Rocket Launcher."
[
	
]

@PointClass base(Ammo) color(0 0 255) studio("") = ammo_slugs : "Slugs for the Railgun."
[
	
]

@PointClass base(Ammo) color(80 255 40) studio("") = ammo_nukes : "Nukes for the BFG10K."
[
	
]

@PointClass base(Ammo) color(255 255 255) studio("") = ammo_bolts : "Bolts for the Lightning."
[
	
]

@SolidClass base(Targetname) color(0 255 255) = func_button : "When a button is touched by a player, it moves in the direction set by the 'angle' key, triggers all its targets, stays pressed by the amount of time set by the 'wait' key, then returns to its original position where it can be operated again."
[
	angle(integer) : "Determines the direction in which the button will move (up = -1, down = -2)."
	target(target_destination) : "All entities with a matching target name will be triggered."
	speed(integer) : "Speed"
	wait(integer) : "Wait"
	lip(integer) : "Lip"
	sounds(integer) : "Sound (0, 1 stone, -1 silent)"
	health(integer) : "Health (Door takes DMG to open)"
]

@SolidClass base(Targetname) color(0 255 255) = func_conveyor : "Conveyors are stationary brushes that move what's on them. The brush should be have a surface with at least one current content enabled."
[
	spawnflags(Flags) =
	[
		1 : "start_open" : 0
		2 : "toggle" : 0
	]
	speed(integer) : "The speed at which objects on the conveyor are moved (default 100)." : 100
]

@SolidClass base(Targetname) color(0 255 255) = func_door : "A sliding door. By default, doors open when a player walks close to them."
[
	spawnflags(Flags) =
	[
		1 : "start_open" : 0
		2 : "toggle" : 0
	]
	message(string) : "An optional string printed when the door is first touched."
	angle(integer) : "Determines the opening direction of the door (up = -1, down = -2)."
	health(integer) : "If set, door must take damage to open."
	speed(integer) : "The speed with which the door opens (default 100)." : 100
	wait(integer) : "Wait before returning (3 default, -1 = never return)."
	lip(integer) : "The lip remaining at end of move (default 8 units)." : 8
	dmg(integer) : "The damage inflicted on players who block the door as it closes (default 2)." : 2
	sounds(integer) : "The sound set for the door (0 default, 1 stone, -1 silent)." : 0
]

@SolidClass base(Targetname) color(0 255 255) = func_door_rotating : "A door which rotates about an origin on its Z axis. By default, doors open when a player walks close to them."
[
	spawnflags(Flags) =
	[
		1 : "start_open" : 0
		2 : "toggle" : 0
		4 : "reverse" : 0
		8 : "x_axis" : 0
		16 : "y_axis" : 0
	]
	message(string) : "An optional string printed when the door is first touched."
	health(integer) : "If set, door must take damage to open."
	speed(integer) : "The speed with which the door opens (default 100)." : 100
	rotation(integer) : "The rotation the door will open, in degrees (default 90).": 90
	wait(integer) : "Wait before returning (3 default, -1 = never return)."
	dmg(integer) : "The damage inflicted on players who block the door as it closes (default 2)." : 2
	sounds(integer) : "The sound set for the door (0 default, 1 stone, -1 silent)." : 0
]

@SolidClass base(Targetname) color(0 255 255) = func_door_secret : "A secret door which opens when shot, or when targeted. The door first slides back, and then to the side."
[
	spawnflags(Flags) =
	[
		1 : "always_shoot" : 0
		2 : "first_left" : 0
		4 : "first_down" : 0
	]
	angle(integer) : "The angle at which the door opens."
	message(string) : "An optional string printed when the door is first touched."
	health(integer) : "If set, door must take damage to open."
	speed(integer) : "The speed with which the door opens (default 100)." : 100
	wait(integer) : "Wait before returning (3 default, -1 = never return)."
	dmg(integer) : "The damage inflicted on players who block the door as it closes (default 2)." : 2
]

@SolidClass base(Target) color(0 255 255) = func_group : "Groups brushes together in Radiant for convenience. When the map is compiled, these entities are merged back into worldspawn." [

]

@SolidClass base(Target) color(0 255 255) = func_plat : "func_plat"
[
	spawnflags(Flags) =
	[
		1 : "low_trigger" : 0
	]
	speed(integer) : "Speed"
	accel(integer) : "Acceleration"
	lip(integer) : "Lip"
	height(integer) : "Height"
	sounds(integer) : "Sound (0, 1 stone, -1 silent)"
	targetname(string) : "The target name of this entity."
]

@SolidClass base(Target) color(0 255 255) = func_rotating : "func_rotating"
[
	spawnflags(Flags) =
	[
		1 : "start_on" : 0
		2 : "reverse" : 0
		4 : "x_axis" : 0
		8 : "y_axis" : 0
		16 : "touch_pain" : 0
		32 : "stop" : 0
	]
	speed(integer) : "Speed"
	dmg(integer) : "Damage"
	targetname(string) : "The target name of this entity."
]

@PointClass base(Target) color(0 255 255) size(-16 -16 -16, 16 16 16) = func_timer : "func_timer"
[
	spawnflags(Flags) =
	[
		1 : "start_on" : 0
	]
	wait(integer) : "Wait"
	random(integer) : "Random"
	delay(integer) : "delay"
	targetname(string) : "The target name of this entity."
]

@SolidClass base(Target) color(0 255 255) = func_train : "func_train"
[
	spawnflags(Flags) =
	[
		1 : "start_on" : 0
		2 : "toggle" : 0
		4 : "block_stops" : 0
	]
	dmg(integer) : "Damage"
	speed(integer) : "Speed"
	noise(string) : "Noise File"
	targetname(string) : "The target name of this entity."
]

@SolidClass base(Target) color(0 255 255) = func_wall : "func_wall"
[
	spawnflags(Flags) =
	[
		1 : "triggered" : 0
		2 : "toggle" : 0
		4 : "start_on" : 0
	]
	targetname(string) : "The target name of this entity."
]

@SolidClass base(Target) color(0 255 255) = func_water : "func_water"
[
	spawnflags(Flags) =
	[
		1 : "start_open" : 0
	]
	angle(integer) : "Angle"
	speed(integer) : "Speed"
	wait(integer) : "Wait"
	lip(integer) : "Lip"
	targetname(string) : "The target name of this entity."
]

@PointClass base(Target) color(0 180 0) size(-4 -4 -4, 4 4 4) = info_null : "A positional target for spotlights, etc. These are inhibited in the game and are only useful to the editor and BSP compiler."
[
	targetname(string) : "The target name of this entity."
]

@PointClass base(Target) color(0 180 180) size(-4 -4 -4, 4 4 4) = info_notnull : "A positional target for other entities. Unlike info_null, these are available in the game and can be targeted by other entities (e.g. info_player_intermission)."
[
	targetname(string) : "The target name of this entity."
]

@PointClass color(255 255 255) size(-16 -16 -24, 16 16 32) = info_player_start : "Single player spawn point."
[
	angle(integer) : "The angle at which the player will face when spawned."
]

@PointClass color(255 0 255) size(-16 -16 -24, 16 16 32) = info_player_deathmatch : "Deathmatch spawn point."
[
	angle(integer) : "The angle at which the player will face when spawned."
]

@PointClass base(Target) color(0 255 255) size(-16 -16 -24, 16 16 32) = info_player_intermission : "Camera for intermission screen between matches."
[
	angles(integer) : "The 'pitch yaw roll' angles for the camera (e.g. 20 270 0)."
]

@PointClass color(255 0 0) size(-16 -16 -24, 16 16 32) = info_player_team1 : "Player spawn point for red team in teams or CTF gameplay."
[
	angle(integer) : "The angle at which the player will face when spawned."
]

@PointClass color(0 0 255) size(-16 -16 -24, 16 16 32) = info_player_team2 : "Player spawn point for blue team in teams or CTF gameplay."
[
	angle(integer) : "The angle at which the player will face when spawned."
]

@PointClass color(255 255 0) size(-16 -16 -24, 16 16 32) = info_player_team3 : "Player spawn point for yellow team in teams or CTF gameplay."
[
	angle(integer) : "The angle at which the player will face when spawned."
]

@PointClass color(0 255 0) size(-16 -16 -24, 16 16 32) = info_player_team4 : "Player spawn point for green team in teams or CTF gameplay."
[
	angle(integer) : "The angle at which the player will face when spawned."
]

@PointClass base(Target) color(255 255 255) size(-8 -8 -8, 8 8 8) = light : "Point light source."
[
	light(integer) : "Light radius (default 300)." : 300
	_color(color1) : "Light color as 3 decimal values from 0.0 - 1.0 (default 1 1 1)." : "1 1 1"
	_size(integer) : "Spotlight size, to simulate area lights and cast penumbrae (default 16)." : 16
]

@PointClass base(Target) color(200 255 255) size(-8 -8 -8, 8 8 8) = light_spot : "Point light source with attenuation cone."
[
	light(integer) : "Light radius (default 300)." : 300
	_color(color1) : "Light color as 3 decimal values from 0.0 - 1.0 (default 1 1 1)." : "1 1 1"
	_cone(integer) : "Spotlight attenuation cone width, in degrees (default 22.5)." : 22
	_angle(integer) : "Spotlight direction (up = -1, down = -2, yaw = positive value)."
	_size(integer) : "Spotlight size, to simulate area lights and cast penumbrae (default 16)." : 16
]

@PointClass base(Target) color(255 255 0) size(-16 -16 -16, 16 16 16) = light_sun : "Directional sun light source."
[
	light(integer) : "Sun light as an integer value from 0 - 255 (default 255)." : 255
	_color(color1) : "Sun color as 3 decimal values from 0.0 - 1.0 (default 1 1 1)." : "1 1 1"
	_size(integer) : "Sun size, to simulate area lights and cast penumbrae (default 16)." : 256
]

@PointClass base(Target) color(0 255 0) size(-16 -16 -16, 16 16 16) = misc_teleporter : "misc_teleporter"
[
	spawnflags(Flags) =
	[
		1 : "?" : 0
		2 : "?" : 0
		4 : "no_effects" : 0
	]
]

@PointClass base(Target) color(0 255 0) size(-16 -16 -16, 16 16 16) = misc_teleporter_dest : "misc_teleporter_dest"
[
	angle(integer) : "Angle"
	targetname(string) : "The target name of this entity."
]

@PointClass base(Target) color(255 255 0) size(-16 -16 -16, 16 16 16) = misc_emit : "misc_emit"
[
	spawnflags(Flags) =
	[
		1 : "light" : 0
		2 : "sparks" : 0
		4 : "steam" : 0
		8 : "flames" : 0
		16 : "corona" : 0
		32 : "sound" : 0
		64 : "model" : 0
	]
	angles(integer) : "Angles"
	velocity(integer) : "Velocity"
	color(string) : "Color - R G B"
	hz(integer) : "Emission Rate"
	drift(integer) : "Drift"
	radius(integer) : "Radius"
	count(integer) : "Count"
	scale(integer) : "Scale"
	sound(string) : "Sound File"
	attenuation(integer) : "Attenuation"
	wait(integer) : "Wait"
	model(string) : "Static Model"
]

@PointClass base(Target) color(.8 .8 0) size(-8 -8 -8, 8 8 8) = misc_fireball : "misc_fireball"
[
	angles(integer) : "Angles"
	dmg(integer) : "Damage"
	random(integer) : "Random"
	speed(integer) : "Speed"
	wait(integer) : "Wait"
]

@PointClass base(Target) color(.8 .8 0) size(-8 -8 -8, 8 8 8) = misc_model : "misc_model"
[
	angles(integer) : "Angles"
	scale(integer) : "Scale"
	model(string) : "Static Model Name"
]

//Path Corner
@PointClass base(Targetname) color(128 76 0) size(-8 -8 -8, 8 8 8) = path_corner : "path_corner"
[
	spawnflags(Flags) =
	[
		1 : "teleport" : 0
	]
	target(string) : "Next path target"
	pathtarget(string) : "Event to trigger"
	targetname(string) : "The target name of this entity."
]

//Target entities
@PointClass base(Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = target_light : "target_light"
[
	spawnflags(Flags) =
	[
		1 : "start_on" : 0
		2 : "toggle" : 0
	]
	colors(string) : "Color - R G B"
	delay(integer) : "Delay"
	dmg(integer) : "Radius"
	targetname(string) : "The target name of this entity."
	wait(integer) : "Wait"
]

@PointClass base(Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = target_speaker : "target_speaker"
[
	spawnflags(Flags) =
	[
		1 : "loop_on" : 0
		2 : "loop_off" : 0
	]
	noise(string) : "Name of Sound"
	attenuation(choices) : "Attenuation Level" : 0 =
	[
		-1 : "No attenuation, send the sound to the entire level."
		1 : "Normal attenuation, hearable to all those in PHS of entity."
		2 : "Idle attenuation, hearable only by those near to entity."
		3 : "Static attenuation, hearable only by those very close to entity."
	]
	targetname(string) : "The target name of this entity."
]

@PointClass base(Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = target_string : "target_string"
[
	message(string) : "Message"
	targetname(string) : "The target name of this entity."
]

//Triggers
@PointClass base(Targetname) color(128 128 128) = trigger_relay : "Relay trigger"
[
	delay(integer) : "Delay in Seconds" : 0
	message(string) : "String to Display"
	target(string) : "Triggering Entity or Team"
	killtarget(string) : "Entity or Team to Kill"
	targetname(string) : "The target name of this entity."
]

@PointClass base(Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = trigger_always : "Always triggers" 
[
	killtarget(string) : "Kill Target"
	delay(integer) : "Time before triggering"
]

//trigger_exec needs to be revised. 1/31/2017
@PointClass base(Target, Triggers) color(128 128 128) = trigger_exec : "Executes a console command or script file when activated." 
[
	commands(string) : "The console command(s) to execute."
	script(string) : "The script file (.cfg) to execute."
	delay(integer) : "The delay in seconds between activation and execution of the commands."
]

@SolidClass base(Targetname) color(128 128 128) = trigger_hurt : "Hurts on touch"
[
	spawnflags(Flags) =
	[
		1 : "start_off" : 0
		2 : "toggle" : 0
		4 : "no_protection" : 0
		8 : "slow" : 0
	]
	dmg(integer) : "Damage" : 5
	targetname(string) : "The target name of this entity."
	
]

@SolidClass base(trigger_relay) = trigger_once : "Single fire trigger"
[
	spawnflags(Flags) =
	[
		4 : "triggered" : 0
	]
	delay(integer) : "Delay in Seconds" : 0
	message(string) : "String to Display"
	target(string) : "Triggering Entity or Team"
	killtarget(string) : "Entity or Team to Kill"
	targetname(string) : "The target name of this entity."
]

@SolidClass color(128 128 128) = trigger_push : "Pushes the player in any direction. These are commonly used to make jump pads to send the player upwards. Using the angles key, you can project the player in any direction using 'pitch yaw roll.'"
[
	spawnflags(Flags) =
	[
		1 : "push_once" : 0
		2 : "push_effects" : 0
	]
	angles(integer) : "The direction to push the player in 'pitch yaw roll' notation (e.g. -80 270 0)." : 0
	speed(integer) : "The speed with which to push the player (default 100)." : 100
]

@SolidClass base(Target) color(0 255 00) = trigger_teleporter : "misc_teleporter_dest"
[
	target(string) : "misc_teleporter_dest"
]

@SolidClass base(trigger_once) = trigger_multiple : "Multiple fire trigger"
[
	spawnflags(Flags) =
	[
		1 : "triggered" : 0
		2 : "shootable" : 0
	]
	delay(integer) : "Delay in Seconds" : 0
	wait(float) : "Interval in Seconds"
	message(string) : "String to Display"
	target(string) : "Triggering Entity or Team"
	killtarget(string) : "Entity or Team to Kill"
	targetname(string) : "The target name of this entity."
]

// World Spawn
@SolidClass = worldspawn : "World entity"
[
	message(string) : "Map Title"
	sky(string) : "Sky Environment Map (default unit1_)"
	ambient_light(float) : "Ambient Light Level (Float Value)"
	sun_light(integer) : "Sun Light Intensity, scalar value 0 - 255"
	sun_color(string) : "Sun Light Color (e.g. 0.8 0.4 0.7)"
	sun_angles(integer) : "Sun Light Angles"
	brightness(float) : "Global Light Scale"
	saturation(float) : "Global Light Saturation)"
	contrast(float) : "Global Light Contrast"
	weather(string) : "Weather Effects"
	gravity(integer) : "Gravity (default 800)" : 800
	gameplay(string) : "deathmatch, instagib, arena"
	hook(integer) : "Grappling Hook (1 = on)" : 0
	teams(integer) : "Team Play" : 0
	ctf(integer) : "CTF" : 0
	match(integer) : "Match Play" : 0
	fraglimit(integer) : "Frag Limit" : 20
	roundlimit(integer) : "Round Limit" : 20
	capturelimit(integer) : "Capture Limit" : 20
	timelimit(integer) : "Time Limit (Minutes)" : 20
	give(string) : "give"
	
]